#include<stdio.h>
#include <stdlib.h>
int main(){
int status;
pid_t pid_figlio;
printf("S1(padre1) - pid = %d\n", getpid());
printf ("fork esterna - \n ");
if ((pid_figlio= fork())== -1)
printf( " fork non riuscita !");
else 
if (pid_figlio==0){
printf(" figlio1: pid= %d, padre pid= %d\m", getpid(), getpid());
ramo34();
}
 else {
 	printf("S2 (padre 1) - pid = %d\n", getpid());
 	printf ("wait fine ramo P34 (padre1 join figlio1) \n");
 	waitpid(pid_figlio, &status, 0);
 	printf("fine attesa P34 \n");
 	printf("S5 (padre1)  - pid = %d\n", getpid());
 	exit(0);
 }
 ramo34(){
 	int status;
 	printf(" fork - processi P34 -> creazione P4 \n");
 	if ((pid4 = fork()) == -1)
 	printf( " fork non riuscita! ");
 	if (pid4==0){
 		printf("   S4 (figlio2) -pid= %d, padre pid = %d\n", getpid(), getppid());
 		
	 }
	 else {printf " S3 (padre2) - pid= %d, padre pid = %d\n", getpid(), getppid()),
	 printf(" wait fine figlio P4 (padre2 join figlio2) \n");
	 waitpid(pid4, &status, 0);
	 printf ("fine attesa P4 \n");
	 printf(" fine ramo P34 \n");
	 
	 }
	 exit(0);
 }
 
}

#include <stdio.h>
#include <stdlib.h>
int calcoli_figlio1(){
int k;
printf("1.1 elab. paralella processo figlio \n");
k=3+2;
return k;
}

int calcoli_padre1(){
int k;
printf("1 elab. parallela processo padre \n");
k=6-2;
return k;
}

int calcoli_padre2(int a, int b){
int k;
printf("2 elab. finale padre \n");
k=(a+b);
return k;
}

int main(){
int x,y,z,retv;
pid_t pid;
pid= fork();
if(pid==0){
x=calcoli_figlio1();
exit(x);
}
else{
y=calcoli_padre1();}
printf("..join : padre aspetta \n");
wait(&retv);
x= WEXITSTATUS(retv);
z= calcoli_padre2(x,y);
printf("-> risultato finale z= %d \n",z);
}
